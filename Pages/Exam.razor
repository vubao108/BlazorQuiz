@page "/exam/{userid:int}/{examid:int}/{examname}"
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;

@inject IRepository repository;
@inject NavigationManager navigationManager

@if (questions == null)
{


    <h2>loading</h2>
}
else if (questions.UserExamId == 0)
{ <h4>Hết lượt thi hoặc bài thi bị khoá</h4> }
else
{
    @if (kieu == 0)
    {
        <div class="container">
            <div class="row">
                <div class="col-6"><strong> @ExamName </strong></div>
                <div class="col-4"> <span style="color:red">@RemainTime</span></div>
                <div class="col-2"><button @onclick="Submit" class="btn-success" style="border-radius:4px"> Nộp Bài</button></div>

            </div>
            <div class="row"></div>

            @for (var index = 0; index < questions.Questions.Count; index++)
            {
                var question = questions.Questions[index];
                <div class="row">
                    <div class="col" style="border:1px dashed blue; border-radius:24px; color:cadetblue">
                        <b>@(index+1). @question.QuestionText</b>
                        <EditForm Model="question">
                            <InputRadioGroup @bind-Value="question.UserAnswerId">
                                @foreach (var answer in question.Answers)
                                            {


                                    @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                                {
                                        <InputRadio Value="answer.AnswerId" /> @answer.AnswerText <br />
                                                }

                                            }
                            </InputRadioGroup>
                        </EditForm>
                    </div>
                </div><br />

            }
        </div> }
    else
    {
        <div style="border:1px dashed blue; border-radius:12px">
            <h5> @(CurrentIndex + 1). @CurrentDisplayQuestion.QuestionText </h5>


            <EditForm Model="CurrentDisplayQuestion">

                <InputRadioGroup @bind-Value="CurrentDisplayQuestion.UserAnswerId">
                    @foreach (var answer in CurrentDisplayQuestion.Answers)
                            {


                        @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                {
                            <InputRadio Value="answer.AnswerId" /> @answer.AnswerText <br />
                                }

                            }
                </InputRadioGroup>

            </EditForm>
        </div>
        <button @onclick="MovePrev" class="btn-primary">Trước</button>
        <button @onclick="MoveNext" class="btn-primary">Tiếp</button>

    }
}

@code {
    [Parameter]
    public string ExamName { get; set; }
    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public int ExamId { get; set; }

    private int kieu = 0; // 0 : danh sach cau hoi  1: tung cau hoi.
    private int CountToSync = 0;

    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;
    protected override async Task OnInitializedAsync()
    {
        questions = await repository.LayDanhSachCauHoi(UserId, ExamId);
        if (questions.UserExamId == 0)
            return;

        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        RemainTime = $"{RemainSecondToDoExam / 60} phút:{RemainSecondToDoExam % 60} giây ";
        StartCountdown();

    }

    public async void MoveNext()
    {
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex + 1) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

    }
    public async void MovePrev()
    {
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex - 1 + questions.Questions.Count) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

    }
    public async void Submit()
    {
        timer.Stop();
        await CapNhatCauTraLoi();
        //await CapNhatDiem();
        NavigateToResultPage();

    }


    private async Task CapNhatCauTraLoi()
    {
        //if (CurrentDisplayQuestion.UserAnswerId > 0)
        //{

        //    await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
        //}
        foreach (var question in questions.Questions)
        {
            if (!question.IsSyncUserAnswer && question.UserAnswerId > 0)
            {
                await repository.CapNhatCauTraLoi(question.ExamQuestionId, question.UserAnswerId);
                question.IsSyncUserAnswer = true;
                //_logger.LogInformation($"update ExamQuestionId : {question.ExamQuestionId}, UserAnswerId:{question.UserAnswerId}");
            }
        }

    }


    private async Task CapNhatDiem()
    {
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

    }
    void StartCountdown()
    {

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
    }
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if (RemainSecondToDoExam > 0)
        {
            CountToSync++;
            RemainSecondToDoExam--;
            RemainTime = $"{RemainSecondToDoExam / 60} phút:{RemainSecondToDoExam % 60} giây ";
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {

                StateHasChanged();
            });
            if (CountToSync % 10 == 0)
            {
                CapNhatCauTraLoi();
            }

        }
        else
        {
            timer.Stop();




            NavigateToResultPage();

        }
    }
    public async void NavigateToResultPage()
    {
        await CapNhatDiem();
        navigationManager.NavigateTo($"ExamResult/{questions.UserExamId}");
    }

    public void Dispose()
    {
        timer?.Dispose();
    }




}
