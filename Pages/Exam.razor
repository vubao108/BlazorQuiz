@page "/exam/***REMOVED***userid:int***REMOVED***/***REMOVED***examid:int***REMOVED***/***REMOVED***examname***REMOVED***"
@attribute [Authorize(Roles = "CanJoinExam")]
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;
@using Microsoft.Extensions.Configuration;


@inject IRepository repository;
@inject NavigationManager navigationManager;
@inject IConfiguration configuration;
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (questions == null)
***REMOVED***


    <h2>loading</h2>
***REMOVED***
else if (questions.UserExamId == 0)
***REMOVED*** <h4>Hết lượt thi hoặc bài thi bị khoá</h4> ***REMOVED***
else
***REMOVED***
    @if (kieu == 0)
    ***REMOVED***
        <div class="container">
            <div class="row">
                <div class="col-12 col-md-6"><strong> @ExamName </strong></div>
                <div class="col-6 col-md-4"> <span style="color:red">@RemainTime</span></div>
                <div class="col-6 col-md-2"><button @onclick="Submit" class="btn-success" style="border-radius:4px"> Nộp Bài</button></div>

            </div>
            <div class="row"></div>

            @for (var index = 0; index < questions.Questions.Count; index++)
            ***REMOVED***
                var question = questions.Questions[index];
                <div class="row">
                    <div class="col" style="border:1px dashed blue; border-radius:24px; color:cadetblue">
                        <b>@(index+1). @question.QuestionText</b>
                        <EditForm Model="question">
                            <InputRadioGroup @bind-Value="question.UserAnswerId">
                                @foreach (var answer in question.Answers)
                                            ***REMOVED***


                                    @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                                ***REMOVED***
                                        <label>
                                            <InputRadio Value="answer.AnswerId" @onclick="OnAnswerClick" /> @answer.AnswerText
                                        </label><br />

                                            ***REMOVED***

                                        ***REMOVED***
                            </InputRadioGroup>
                        </EditForm>
                    </div>
                </div><br />

        ***REMOVED***
        </div> ***REMOVED***
    else
    ***REMOVED***
        <div style="border:1px dashed blue; border-radius:12px">
            <h5> @(CurrentIndex + 1). @CurrentDisplayQuestion.QuestionText </h5>


            <EditForm Model="CurrentDisplayQuestion">

                <InputRadioGroup @bind-Value="CurrentDisplayQuestion.UserAnswerId">
                    @foreach (var answer in CurrentDisplayQuestion.Answers)
                            ***REMOVED***


                        @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                ***REMOVED***
                            <InputRadio Value="answer.AnswerId" @onclick="OnAnswerClick" /> @answer.AnswerText <br />
                            ***REMOVED***

                        ***REMOVED***
                </InputRadioGroup>

            </EditForm>
        </div>
        <button @onclick="MovePrev" class="btn-primary">Trước</button>
        <button @onclick="MoveNext" class="btn-primary">Tiếp</button>

***REMOVED***
***REMOVED***

@code ***REMOVED***
    [Parameter]
    public string ExamName ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int UserId ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int ExamId ***REMOVED*** get; set; ***REMOVED***

    private ClaimsPrincipal User;

    private int kieu = 0; // 0 : danh sach cau hoi  1: tung cau hoi.
    private int CountToSync = 0;
    private int SyncInterval;

    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;

    private void OnAnswerClick()
    ***REMOVED***

***REMOVED***
    protected override async Task OnInitializedAsync()
    ***REMOVED***
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();

        User = authState.User;
        
        

        questions = await repository.LayDanhSachCauHoi(UserId, ExamId);
        if (questions.UserExamId == 0)
            return;

        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
        SyncInterval = Convert.ToInt32(configuration.GetSection("SyncSetting")["SecondInterval"]);
        StartCountdown();

***REMOVED***

    public async void MoveNext()
    ***REMOVED***
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex + 1) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

***REMOVED***
    public async void MovePrev()
    ***REMOVED***
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex - 1 + questions.Questions.Count) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

***REMOVED***
    public async void Submit()
    ***REMOVED***
        timer.Stop();
        await CapNhatCauTraLoi();
        //await CapNhatDiem();
        NavigateToResultPage();

***REMOVED***


    private async Task CapNhatCauTraLoi()
    ***REMOVED***
        //if (CurrentDisplayQuestion.UserAnswerId > 0)
        //***REMOVED***

        //    await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
        //***REMOVED***
        foreach (var question in questions.Questions)
        ***REMOVED***
            if (!question.IsSyncUserAnswer && question.UserAnswerId > 0)
            ***REMOVED***
                await repository.CapNhatCauTraLoi(question.ExamQuestionId, question.UserAnswerId);
                question.IsSyncUserAnswer = true;
                //_logger.LogInformation($"update ExamQuestionId : ***REMOVED***question.ExamQuestionId***REMOVED***, UserAnswerId:***REMOVED***question.UserAnswerId***REMOVED***");
        ***REMOVED***
    ***REMOVED***

***REMOVED***


    private async Task CapNhatDiem()
    ***REMOVED***
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

***REMOVED***
    void StartCountdown()
    ***REMOVED***

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
***REMOVED***
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    ***REMOVED***
        if (RemainSecondToDoExam > 0)
        ***REMOVED***
            CountToSync++;
            RemainSecondToDoExam--;
            RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            ***REMOVED***

                StateHasChanged();
        ***REMOVED***);
            if (CountToSync % 10 == 0)
            ***REMOVED***
                CapNhatCauTraLoi();
        ***REMOVED***

    ***REMOVED***
        else
        ***REMOVED***
            timer.Stop();




            NavigateToResultPage();

    ***REMOVED***
***REMOVED***
    public async void NavigateToResultPage()
    ***REMOVED***
        await CapNhatDiem();
        navigationManager.NavigateTo($"ExamResult/***REMOVED***questions.UserExamId***REMOVED***");
***REMOVED***

    public void Dispose()
    ***REMOVED***
        timer?.Dispose();
***REMOVED***




***REMOVED***
