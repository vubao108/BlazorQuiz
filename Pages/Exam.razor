@page "/exam"
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;
@inject IRepository repository;
@inject NavigationManager navigationManager
<h3>Exam @RemainTime</h3>


@if (questions == null)
{


    <h2>loading</h2>
}
else if (questions.UserExamId == 0) { <h4>Hết lượt thi hoặc bài thi bị khoá</h4> }
else
{

    <h4>  @CurrentDisplayQuestion.QuestionText </h4>

    <EditForm Model="CurrentDisplayQuestion">
        <InputRadioGroup @bind-Value="CurrentDisplayQuestion.UserAnswerId">
            @foreach (var answer in CurrentDisplayQuestion.Answers)
                {
                <div border="2px solid #333">
                    <InputRadio Value="answer.AnswerId" /> @answer.AnswerText <br />
                </div>
                }
        </InputRadioGroup>
    </EditForm>

    <button @onclick="MoveNext">Next</button>
}

@code {
    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;
    protected override async Task OnInitializedAsync()
    {
        questions = await repository.LayDanhSachCauHoi(1, 74);
        if (questions.UserExamId == 0)
            return;

        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        RemainTime = $"{RemainSecondToDoExam / 60} phút:{RemainSecondToDoExam % 60} giây ";
        StartCountdown();

    }

    public void MoveNext()
    {
        CapNhatCauTraLoi();

        CurrentIndex++;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex % questions.Questions.Count];

    }

    private async void CapNhatCauTraLoi()
    {
        if (CurrentDisplayQuestion.UserAnswerId > 0)
        {

            await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
        }
    }
    private async void CapNhatDiem()
    {
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

    }
    void StartCountdown()
    {

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
    }
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if (RemainSecondToDoExam > 0)
        {
            RemainSecondToDoExam--;
            RemainTime = $"{RemainSecondToDoExam / 60} phút:{RemainSecondToDoExam % 60} giây ";
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {

                StateHasChanged();
            });
        }
        else
        {
            timer.Stop();
            CapNhatDiem();
            NavigateToResultPage();

        }
    }
    public void NavigateToResultPage()
    {
        navigationManager.NavigateTo($"/ExamResult/{questions.UserExamId}");
    }

    public void Dispose()
    {
        timer?.Dispose();
    }




}
