@page "/exam/***REMOVED***userid***REMOVED***/***REMOVED***examid***REMOVED***"
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;
@inject IRepository repository;
@inject NavigationManager navigationManager
<h3>Exam @RemainTime</h3>


@if (questions == null)
***REMOVED***


    <h2>loading</h2>
***REMOVED***
else if (questions.UserExamId == 0) ***REMOVED*** <h4>Hết lượt thi hoặc bài thi bị khoá</h4> ***REMOVED***
else
***REMOVED***

    <h4>  @CurrentDisplayQuestion.QuestionText </h4>

    <EditForm Model="CurrentDisplayQuestion">
        <InputRadioGroup @bind-Value="CurrentDisplayQuestion.UserAnswerId">
            @foreach (var answer in CurrentDisplayQuestion.Answers)
                ***REMOVED***
                <div border="2px solid #333">
                    <InputRadio Value="answer.AnswerId" /> @answer.AnswerText <br />
                </div>
            ***REMOVED***
        </InputRadioGroup>
    </EditForm>

    <button @onclick="MoveNext">Next</button>
***REMOVED***

@code ***REMOVED***
    [Parameter]
    public int UserId***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int ExamId***REMOVED*** get; set; ***REMOVED***

    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;
    protected override async Task OnInitializedAsync()
    ***REMOVED***
        questions = await repository.LayDanhSachCauHoi(UserId, ExamId);
        if (questions.UserExamId == 0)
            return;

        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
        StartCountdown();

***REMOVED***

    public void MoveNext()
    ***REMOVED***
        CapNhatCauTraLoi();

        CurrentIndex++;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex % questions.Questions.Count];

***REMOVED***

    private async void CapNhatCauTraLoi()
    ***REMOVED***
        if (CurrentDisplayQuestion.UserAnswerId > 0)
        ***REMOVED***

            await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
    ***REMOVED***
***REMOVED***
    private async void CapNhatDiem()
    ***REMOVED***
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

***REMOVED***
    void StartCountdown()
    ***REMOVED***

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
***REMOVED***
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    ***REMOVED***
        if (RemainSecondToDoExam > 0)
        ***REMOVED***
            RemainSecondToDoExam--;
            RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            ***REMOVED***

                StateHasChanged();
        ***REMOVED***);
    ***REMOVED***
        else
        ***REMOVED***
            timer.Stop();
            CapNhatDiem();
            NavigateToResultPage();

    ***REMOVED***
***REMOVED***
    public void NavigateToResultPage()
    ***REMOVED***
        navigationManager.NavigateTo($"/ExamResult/***REMOVED***questions.UserExamId***REMOVED***");
***REMOVED***

    public void Dispose()
    ***REMOVED***
        timer?.Dispose();
***REMOVED***




***REMOVED***
