@page "/exam/***REMOVED***userid:int***REMOVED***/***REMOVED***examid:int***REMOVED***"
@attribute [Authorize(Roles = "CanJoinExam")]
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;
@using Microsoft.Extensions.Configuration;


@inject IRepository repository;
@inject NavigationManager navigationManager;
@inject IConfiguration configuration;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppState AppState;


@if (questions == null)
***REMOVED***


    <h2>loading</h2>
***REMOVED***
else if (questions.UserExamId == 0)
***REMOVED*** <h4>Hết lượt thi hoặc bài thi bị khoá</h4> ***REMOVED***
else
***REMOVED***
    @if (kieu == 0)
    ***REMOVED***

@*<div class="row">*@
    @*<div class="col-11 col-md-6"><strong> @AppState.SelectedExamInfo.ExamName </strong></div>
    <div class="col-6 col-md-4"> <span style="color:red">@RemainTime</span></div>*@
<div class="floating-button">
    <span style="color:red">@RemainTime</span> <br />
    <button @onclick="Submit" class="btn btn-success">
        Nộp Bài
    </button>
</div>
@*</div>*@
       
            @*<button @onclick="Submit" class="btn btn-success floating-button">
                Nộp Bài
            </button>*@
        
<div class="row">
    <div class="col-11 col-md-10">
        @for (var index = 0; index < questions.Questions.Count; index++)
        ***REMOVED***
            var question = questions.Questions[index];
            <div class="card bg-light text-dark">

                <div class="card-body">
                    <span class="card-title"><b>@(index+1). @question.QuestionText</b></span>
                    <EditForm Model="question">
                        <InputRadioGroup @bind-Value="question.UserAnswerId">
                            @foreach (var answer in question.Answers)
                                        ***REMOVED***


                                @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                            ***REMOVED***
                                    <label>
                                        <InputRadio Value="answer.AnswerId" @onclick="OnAnswerClick" /> @answer.AnswerText
                                    </label><br />

                                        ***REMOVED***

                                    ***REMOVED***
                        </InputRadioGroup>
                    </EditForm>
                </div>
            </div>
            <br />


    ***REMOVED***
    </div>
</div>
***REMOVED***
    else
    ***REMOVED***
        <div style="border:1px dashed blue; border-radius:12px">
            <h5> @(CurrentIndex + 1). @CurrentDisplayQuestion.QuestionText </h5>


            <EditForm Model="CurrentDisplayQuestion">

                <InputRadioGroup @bind-Value="CurrentDisplayQuestion.UserAnswerId">
                    @foreach (var answer in CurrentDisplayQuestion.Answers)
                            ***REMOVED***


                        @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                ***REMOVED***
                            <InputRadio Value="answer.AnswerId" @onclick="OnAnswerClick" /> @answer.AnswerText <br />
                            ***REMOVED***

                        ***REMOVED***
                </InputRadioGroup>

            </EditForm>
        </div>
        <button @onclick="MovePrev" class="btn-primary">Trước</button>
        <button @onclick="MoveNext" class="btn-primary">Tiếp</button>

***REMOVED***
***REMOVED***

@code ***REMOVED***

    [Parameter]
    public int UserId ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int ExamId ***REMOVED*** get; set; ***REMOVED***
    [CascadingParameter] public IModalService Modal ***REMOVED*** get; set; ***REMOVED***

    private ClaimsPrincipal User;

    private int kieu = 0; // 0 : danh sach cau hoi  1: tung cau hoi.
    private int CountToSync = 0;
    private int SyncInterval;

    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;

    private void OnAnswerClick()
    ***REMOVED***

***REMOVED***


    protected override async Task OnInitializedAsync()
    ***REMOVED***
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();

        User = authState.User;
        if (!User.Identity.IsAuthenticated)
        ***REMOVED***
            navigationManager.NavigateTo("Account/Identity/Login", true);
            return;
    ***REMOVED***


        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);

        if (AppState.SelectedExamInfo == null)
        ***REMOVED***
            AppState.UpdateSelectedExam(this, await repository.LayThongTinBaiThi(ExamId));
    ***REMOVED***

        questions = await repository.LayDanhSachCauHoi(UserId, ExamId);
        if (questions.UserExamId == 0)
            return;

        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        AppState.UpdateRemainSeconds(this,RemainSecondToDoExam);
        RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
        SyncInterval = Convert.ToInt32(configuration.GetSection("SyncSetting")["SecondInterval"]);
        StartCountdown();

***REMOVED***

    public async void MoveNext()
    ***REMOVED***
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex + 1) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

***REMOVED***
    public async void MovePrev()
    ***REMOVED***
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex - 1 + questions.Questions.Count) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

***REMOVED***
    public async void Submit()
    ***REMOVED***
        if(!await XacNhanNopBai())
        ***REMOVED***
            return;
    ***REMOVED***

        timer.Stop();
        await CapNhatCauTraLoi();
        //await CapNhatDiem();
        NavigateToResultPage();

***REMOVED***

    private List<string> GetThuTuCauHoiChuaTraLoi()
    ***REMOVED***
        List<string> unAnswerQuestionOrders = new List<string>();
        for(int i=0; i< questions.Questions.Count; i++)
        ***REMOVED***
            if(questions.Questions[i].UserAnswerId == 0)
            ***REMOVED***
                unAnswerQuestionOrders.Add($"***REMOVED***i + 1***REMOVED***");
        ***REMOVED***
    ***REMOVED***
        return unAnswerQuestionOrders;
***REMOVED***


    private async Task<bool> XacNhanNopBai()
    ***REMOVED***
        var listChuaTraLoi = GetThuTuCauHoiChuaTraLoi();
        if(listChuaTraLoi.Count == 0)
        ***REMOVED***
            return await ShowConfirm("Bạn có chắc chắn muốn nộp bài ?");
    ***REMOVED***
        else
        ***REMOVED***
            String strCauChuaTraLoi = listChuaTraLoi.Aggregate( (current,next) => $"***REMOVED***current***REMOVED*** , ***REMOVED***next***REMOVED***").TrimStart(new char[] ***REMOVED*** ','***REMOVED***);
            return await ShowConfirm($"Bạn chưa trả lời các câu: ***REMOVED***strCauChuaTraLoi***REMOVED***. Bạn có chắc chắn muốn nộp bài ?");
    ***REMOVED***
***REMOVED***

    private async Task CapNhatCauTraLoi()
    ***REMOVED***
        //if (CurrentDisplayQuestion.UserAnswerId > 0)
        //***REMOVED***

        //    await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
        //***REMOVED***
        foreach (var question in questions.Questions)
        ***REMOVED***
            if (!question.IsSyncUserAnswer && question.UserAnswerId > 0)
            ***REMOVED***
                await repository.CapNhatCauTraLoi(question.ExamQuestionId, question.UserAnswerId);
                question.IsSyncUserAnswer = true;
                //_logger.LogInformation($"update ExamQuestionId : ***REMOVED***question.ExamQuestionId***REMOVED***, UserAnswerId:***REMOVED***question.UserAnswerId***REMOVED***");
        ***REMOVED***
    ***REMOVED***

***REMOVED***


    private async Task CapNhatDiem()
    ***REMOVED***
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

***REMOVED***
    void StartCountdown()
    ***REMOVED***

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
***REMOVED***
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    ***REMOVED***
        if (RemainSecondToDoExam > 0)
        ***REMOVED***
            CountToSync++;
            RemainSecondToDoExam--;
            RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            ***REMOVED***

                StateHasChanged();
        ***REMOVED***);
            if (CountToSync % 10 == 0)
            ***REMOVED***
                CapNhatCauTraLoi();
        ***REMOVED***

    ***REMOVED***
        else
        ***REMOVED***
            timer.Stop();




            NavigateToResultPage();

    ***REMOVED***
***REMOVED***
    public async void NavigateToResultPage()
    ***REMOVED***

        await CapNhatDiem();
        AppState.UpdateSelectedExam(this, null);
        navigationManager.NavigateTo($"ExamResult/***REMOVED***questions.UserExamId***REMOVED***");
***REMOVED***

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    ***REMOVED***
        if (Source != this)
        ***REMOVED***
            await InvokeAsync(StateHasChanged);
    ***REMOVED***
***REMOVED***


    async Task<bool> ShowConfirm(String message)
    ***REMOVED***
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDialog.Message), message);
        var confirmDialog = Modal.Show<ConfirmDialog>("Xác nhận nộp bài", parameters);
        var result = await confirmDialog.Result;
        return !result.Cancelled;
***REMOVED***

    public void Dispose()
    ***REMOVED***
        Debug.Print("Exam.Dispose()");
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
        timer?.Dispose();
***REMOVED***




***REMOVED***
