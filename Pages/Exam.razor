@page "/exam/{userid:int}/{examid:int}"
@attribute [Authorize(Roles = "CanJoinExam")]
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;
@using Microsoft.Extensions.Configuration;


@inject IRepository repository;
@inject NavigationManager navigationManager;
@inject IConfiguration configuration;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppState AppState;


@if (questions == null)
{


    <h2>loading</h2>
}
else if (questions.UserExamId == 0)
{ <h4>Hết lượt thi hoặc bài thi bị khoá</h4> }
else
{
    @if (kieu == 0)
    {

@*<div class="row">*@
    @*<div class="col-11 col-md-6"><strong> @AppState.SelectedExamInfo.ExamName </strong></div>
    <div class="col-6 col-md-4"> <span style="color:red">@RemainTime</span></div>*@
@*<div class="floating-button">*@
    @*<span style="color:red">@RemainTime</span> <br />*@
    <button @onclick="Submit" class="btn btn-success floating-button">
        Nộp Bài
    </button>
@*</div>*@
@*</div>*@
       
            @*<button @onclick="Submit" class="btn btn-success floating-button">
                Nộp Bài
            </button>*@
        
<div class="row">
    <div class="col-11 col-md-10">
        @for (var index = 0; index < questions.Questions.Count; index++)
        {
            var question = questions.Questions[index];
            <div class="card bg-light text-dark">

                <div class="card-body">
                    <span class="card-title"><b>@(index+1). @question.QuestionText</b></span>
                    <EditForm Model="question">
                        <InputRadioGroup @bind-Value="question.UserAnswerId">
                            @foreach (var answer in question.Answers)
                                        {


                                @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                                            {
                                    <label>
                                        <InputRadio Value="answer.AnswerId" @onclick="()=>OnAnswerClick(question, answer.AnswerId)" /> @answer.AnswerText
                                    </label><br />

                                            }

                                        }
                        </InputRadioGroup>
                    </EditForm>
                </div>
            </div>
            <br />


        }
    </div>
</div>
    }
    
}

@code {

    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public int ExamId { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    private ClaimsPrincipal User;

    private int kieu = 0; // 0 : danh sach cau hoi  1: tung cau hoi.
    private int CountToSync = 0;
    private int SyncInterval;

    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;

    private async void OnAnswerClick(QuestionDAO selectQuestion, int answerId)
    {
        selectQuestion.UserAnswerId = answerId;
        selectQuestion.IsSyncUserAnswer = false;
        await CapNhatCauTraLoi();
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();

        User = authState.User;
        if (!User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("Account/Identity/Login", true);
            return;
        }

        AppState.CurrentIdentityUserId = UserId;

        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);

        questions = await repository.LayDanhSachCauHoi(UserId, ExamId);
        if (questions.UserExamId == 0)
            return;


        ExamInfo examInfo = await repository.LayThongTinBaiThi(ExamId);
        ExamNotFinishedYet examNotFinishedYet = new ExamNotFinishedYet()
        {
            UserExamId = questions.UserExamId, CurrentExam = examInfo
            , RemainSecond = questions.RemainSeCond, TryNum = questions.TryNum
        };
        AppState.UpdateSelectedExam(this, examNotFinishedYet);




        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        AppState.UpdateRemainSeconds(this,RemainSecondToDoExam);
        RemainTime = $"{RemainSecondToDoExam / 60} phút:{RemainSecondToDoExam % 60} giây ";
        SyncInterval = Convert.ToInt32(configuration.GetSection("SyncSetting")["SecondInterval"]);
        StartCountdown();

    }

    public async void MoveNext()
    {
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex + 1) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

    }
    public async void MovePrev()
    {
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex - 1 + questions.Questions.Count) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

    }
    public async void Submit()
    {
        if(!await XacNhanNopBai())
        {
            return;
        }

        timer.Stop();
        await CapNhatCauTraLoi();
        //await CapNhatDiem();
        NavigateToResultPage();

    }

    private List<string> GetThuTuCauHoiChuaTraLoi()
    {
        List<string> unAnswerQuestionOrders = new List<string>();
        for(int i=0; i< questions.Questions.Count; i++)
        {
            if(questions.Questions[i].UserAnswerId == 0)
            {
                unAnswerQuestionOrders.Add($"{i + 1}");
            }
        }
        return unAnswerQuestionOrders;
    }


    private async Task<bool> XacNhanNopBai()
    {
        var listChuaTraLoi = GetThuTuCauHoiChuaTraLoi();
        if(listChuaTraLoi.Count == 0)
        {
            return await ShowConfirm("Bạn có chắc chắn muốn nộp bài ?");
        }
        else
        {
            String strCauChuaTraLoi = listChuaTraLoi.Aggregate( (current,next) => $"{current} , {next}").TrimStart(new char[] { ','});
            return await ShowConfirm($"Bạn chưa trả lời các câu: {strCauChuaTraLoi}. Bạn có chắc chắn muốn nộp bài ?");
        }
    }

    private async Task CapNhatCauTraLoi()
    {
        //if (CurrentDisplayQuestion.UserAnswerId > 0)
        //{

        //    await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
        //}
        foreach (var question in questions.Questions)
        {
            if (!question.IsSyncUserAnswer && question.UserAnswerId > 0)
            {
                await repository.CapNhatCauTraLoi(question.ExamQuestionId, question.UserAnswerId);
                question.IsSyncUserAnswer = true;
                //_logger.LogInformation($"update ExamQuestionId : {question.ExamQuestionId}, UserAnswerId:{question.UserAnswerId}");
            }
        }
       

    }


    private async Task CapNhatDiem()
    {
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

    }
    void StartCountdown()
    {

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
    }
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if (RemainSecondToDoExam > 0)
        {
            //CountToSync++;
            //RemainSecondToDoExam--;
            //RemainTime = $"{RemainSecondToDoExam / 60} phút:{RemainSecondToDoExam % 60} giây ";
            //// Note that the following line is necessary because otherwise
            //// Blazor would not recognize the state change and not refresh the UI
            //InvokeAsync(() =>
            //{

            //    StateHasChanged();
            //});
            //if (CountToSync % 10 == 0)
            //{
            //    CapNhatCauTraLoi();
            //}
            RemainSecondToDoExam--;

        }
        else
        {
            timer.Stop();




            NavigateToResultPage();

        }
    }
    public async void NavigateToResultPage()
    {

        await CapNhatDiem();
        AppState.UpdateSelectedExam(this, null);
        navigationManager.NavigateTo($"ExamResult/{questions.UserExamId}");
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }


    async Task<bool> ShowConfirm(String message)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDialog.Message), message);
        var confirmDialog = Modal.Show<ConfirmDialog>("Xác nhận nộp bài", parameters);
        var result = await confirmDialog.Result;
        return !result.Cancelled;
    }

    public void Dispose()
    {
        Debug.Print("Exam.Dispose()");
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
        timer?.Dispose();
    }




}
