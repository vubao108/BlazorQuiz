@page "/exam/***REMOVED***userid:int***REMOVED***/***REMOVED***examid:int***REMOVED***/***REMOVED***examname***REMOVED***"
@implements IDisposable
@using BlazorVNPTQuiz.Models
@using BlazorVNPTQuiz.Repository
@using System.Timers;
@inject IRepository repository;
@inject NavigationManager navigationManager


@if (questions == null)
***REMOVED***


    <h2>loading</h2>
***REMOVED***
else if (questions.UserExamId == 0)
***REMOVED*** <h4>Hết lượt thi hoặc bài thi bị khoá</h4> ***REMOVED***
else
***REMOVED***
    <div class="container">
        <div class="row">
            <div class="col-6"><strong> @ExamName </strong></div>
            <div class="col-4"> <span style="color:red">@RemainTime</span></div>
            <div class="col-2"><button @onclick="Submit" class="btn-success"> Nộp Bài</button></div>

        </div>
    </div>

    <h4> @(CurrentIndex+1). @CurrentDisplayQuestion.QuestionText </h4>

    <EditForm Model="CurrentDisplayQuestion">
        <div>
            <InputRadioGroup @bind-Value="CurrentDisplayQuestion.UserAnswerId">
                @foreach (var answer in CurrentDisplayQuestion.Answers)
                    ***REMOVED***


                    @if (!string.IsNullOrEmpty(answer.AnswerText.Trim()))
                        ***REMOVED***
                        <InputRadio Value="answer.AnswerId" /> @answer.AnswerText <br />
                    ***REMOVED***

                ***REMOVED***
            </InputRadioGroup>
        </div>
    </EditForm>

    <button @onclick="MovePrev" class="btn-primary">Trước</button>
    <button @onclick="MoveNext" class="btn-primary">Tiếp</button>

***REMOVED***

@code ***REMOVED***
    [Parameter]
    public string ExamName ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int UserId ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int ExamId ***REMOVED*** get; set; ***REMOVED***

    private QuestionUserExam questions;
    int CurrentIndex = 0;
    QuestionDAO CurrentDisplayQuestion;

    String RemainTime;
    int RemainSecondToDoExam;
    Timer timer;
    protected override async Task OnInitializedAsync()
    ***REMOVED***
        questions = await repository.LayDanhSachCauHoi(UserId, ExamId);
        if (questions.UserExamId == 0)
            return;

        CurrentDisplayQuestion = questions.Questions[CurrentIndex];
        RemainSecondToDoExam = questions.RemainSeCond;
        RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
        StartCountdown();

***REMOVED***

    public async void MoveNext()
    ***REMOVED***
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex + 1) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

***REMOVED***
    public async void MovePrev()
    ***REMOVED***
        await CapNhatCauTraLoi();

        CurrentIndex = (CurrentIndex - 1 + questions.Questions.Count) % questions.Questions.Count;
        CurrentDisplayQuestion = questions.Questions[CurrentIndex];

***REMOVED***
    public async void Submit()
    ***REMOVED***
        timer.Stop();
        await CapNhatCauTraLoi();
        await CapNhatDiem();
        NavigateToResultPage();

***REMOVED***


    private async Task CapNhatCauTraLoi()
    ***REMOVED***
        if (CurrentDisplayQuestion.UserAnswerId > 0)
        ***REMOVED***

            await repository.CapNhatCauTraLoi(CurrentDisplayQuestion.ExamQuestionId, CurrentDisplayQuestion.UserAnswerId);
    ***REMOVED***
***REMOVED***
    private async Task CapNhatDiem()
    ***REMOVED***
        (decimal score, int numOfRight) = questions.GetScore();
        await repository.CapNhatDiem(questions.UserExamId, numOfRight, score);

***REMOVED***
    void StartCountdown()
    ***REMOVED***

        timer = new Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
***REMOVED***
    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    ***REMOVED***
        if (RemainSecondToDoExam > 0)
        ***REMOVED***
            RemainSecondToDoExam--;
            RemainTime = $"***REMOVED***RemainSecondToDoExam / 60***REMOVED*** phút:***REMOVED***RemainSecondToDoExam % 60***REMOVED*** giây ";
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            await InvokeAsync(() =>
            ***REMOVED***

                StateHasChanged();
        ***REMOVED***);
    ***REMOVED***
        else
        ***REMOVED***
            timer.Stop();
            await CapNhatDiem();
            NavigateToResultPage();

    ***REMOVED***
***REMOVED***
    public void NavigateToResultPage()
    ***REMOVED***
        navigationManager.NavigateTo($"/ExamResult/***REMOVED***questions.UserExamId***REMOVED***");
***REMOVED***

    public void Dispose()
    ***REMOVED***
        timer?.Dispose();
***REMOVED***




***REMOVED***
