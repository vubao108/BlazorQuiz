@page "/listexam"
@attribute [Authorize]
@using Microsoft.AspNetCore.Identity;
@using BlazorVNPTQuiz.Models;
@inject UserManager<IdentityUser> userManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject BlazorVNPTQuiz.Repository.IRepository repository
@inject NavigationManager navManager;
@inject AppState AppState;

<AuthorizeView >
    <Authorized>
        <h3>Danh sách bài thi</h3>

        @if (examInfos == null)
        {
            <b>Đang tải bài thi ....</b>
        }
        else if (examInfos.Count == 0)
        {
            <h4>Không có bài thi nào !</h4>
        }
        else
        {
            foreach (var exam in examInfos)
            {
    <div>
        <ExamComponent ExamItem="exam" UserId="@(Convert.ToInt32(CurrentUser?.Id))" /> 

    </div><br />
            }

        }
    </Authorized>
    <NotAuthorized>
        <h3>
            Bạn cần đăng nhập đã  <NavLink class="nav-link" href="Identity/Account/Login">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Đăng nhập
            </NavLink>
        </h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    public IdentityUser CurrentUser { get; set; }
    public List<ExamInfo> examInfos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity.IsAuthenticated)
        {
            CurrentUser = await userManager.FindByNameAsync(user.Identity.Name);
            examInfos = await repository.LayDanhSachBaiThi(Convert.ToInt32(CurrentUser.Id));
            AppState.CurrentIdentityUserId = Convert.ToInt32(CurrentUser.Id);
            
        }
        else
        {
            var returnUrl = navManager.ToBaseRelativePath(navManager.Uri);
            if (string.IsNullOrWhiteSpace(returnUrl)){
                navManager.NavigateTo("Identity/Account/Login", true);
            }
            else
            {
                navManager.NavigateTo($"Identity/Account/Login?returnUrl=~/{returnUrl}", true);
            }
            //navManager.NavigateTo("Identity/Account/Login?returnUrl=~/listexam");

        }
    }

}
