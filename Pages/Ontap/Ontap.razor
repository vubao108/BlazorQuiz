@page "/ontap/{LevelId:int}/{TagIds}/{limit:int}"
@inject IRepositoryOntap repository
@inject AppState appState

@if(questionOnTaps?.Count() == 0)
{
    <p>
        Không có câu hỏi nào để ôn tập, hãy chọn lại các tiêu chí như mức độ và loại câu hỏi.
    </p>
}
@if (questionOnTaps?.Count() > 0 && !IsFinished) {
        
    <div class="container">
        
        <div class="row">
            <div class="col">
                
                <div class="card bg-light text-dark">
                    <div class="card-header">
                        <b> @(CurrentQuestionIndex+1)/@questionOnTaps.Count() . @questionOnTaps[CurrentQuestionIndex].QuestionText
                   </b>
                    </div>
                    <div class="card-body scroll-answer">
                  @* <span class="card-title">></span>*@
                @if (!questionOnTaps[CurrentQuestionIndex].IsMultipleChoice)
                {
                    @foreach(AnswerDAO answerDAO in questionOnTaps[CurrentQuestionIndex].Answers)
                    {
                        <SfRadioButton Label="@answerDAO.AnswerText" Name="Options" Value="@answerDAO.AnswerId.ToString()"
                        @bind-Checked="CurrentUserAnswerIdSelect" 
                        CssClass="@(IsAnswerMode ? answerDAO.IsCorrect ? "e-info btn-block right-answer": "e-info btn-block" : "e-info btn-block"  )"
                        >

                        </SfRadioButton> <br /><br />
                    }
                }
                else
                {

                }
                </div>
               @* <div class="card-footer">

                </div>*@
                </div>
                
            </div>

        </div>
        <div class="row">
            @if (!IsAnswerMode)
            {
                <div class="col-12">
                    <button class="btn btn-primary btn-block" @onclick="onDapAnClick">Đáp án</button>
                </div>
            }else{
            
                <div class="col-3">
                        <button class="btn btn-primary btn-block" @onclick="onEasyClick"> Dễ </button>
                </div>
                <div class="col-6">
                    <button  class="btn btn-info btn-block" @onclick="onNormalClick" >Bình thường </button>
                </div >
                <div class="col-3">
                    <button  class="btn btn-danger btn-block" @onclick="onHardClick">Khó </button>
                </div>
            }
           
        </div>
        <div class="row">
           @* <div class="col-4">
                
                Đã làm: @(CurrentQuestionIndex+1)/@questionOnTaps.Count() câu
            </div>*@
            <div class="col-2"></div>
            <div class="col-8 text-summary">
                
                <b>Tỉ lệ đúng: @Score / @(CurrentQuestionIndex+1)</b>
            </div>
            <div class="col-2"></div>
        </div>

    </div>
}
@if(IsFinished)
{
    <p> Đã xong phiên ôn tập</p>
    <b>Tỉ lệ đúng: @Score / @(CurrentQuestionIndex+1)</b>
}
<style>
    .answer {
        font-size:14px !important
    }
    .right-answer{
        background-color:yellow
    }
    .answer-button{
        
    }
    .scroll-answer{
        max-height:70vh;
        overflow-y:auto;
    }
     .e-radio-wrapper.e-info .e-radio:checked + label::after { /* csslint allow: adjoining-classes */
        background-color: #2196f3;
        color: #2196f3;
       
    }
    .e-radio-wrapper.e-info .e-radio:checked:focus + label::after,
    .e-radio-wrapper.e-info .e-radio:checked + label:hover::after { /* csslint allow: adjoining-classes */
        background-color: #0b7dda;
    }

    .e-radio-wrapper.e-info .e-radio:checked + label::before {
        border-color: #2196f3;
        background-color: #fff;
        
    }

    .e-radio-wrapper.e-info .e-radio:checked:focus + label::before,
    .e-radio-wrapper.e-info .e-radio:checked + label:hover::before {
        border-color: #0b7dda;
       
        
    }

    .e-radio-wrapper.e-info .e-radio + label:hover::before {
        border-color: #b1afaf;
    }
    .e-radio+label .e-label {
         font-size:16px;
        
    }
    .floating-button {
    position: fixed;
    bottom: 50%;
    right: 0;
    border-radius: 4px;
    z-index: 10;
    }
    
    .text-summary{
     text-align: center;
    }

</style>
@code {
    List<QuestionOnTap> questionOnTaps;
    public int CurrentQuestionIndex { get; set; }
    private string CurrentUserAnswerIdSelect;

    [Parameter]
    public string TagIds { get; set; }
    [Parameter]
    public int LevelId { get; set; }
    [Parameter]
    public int limit { get; set; }

    String RightAnswerCSS{ get; set; }

    bool IsAnswerMode { get; set; }

    private int Score;
    private bool IsFinished;

    protected override async Task OnInitializedAsync()
    {
        questionOnTaps = await repository.LayDanhSachCauHoiOnTapTheoMucDo(appState.CurrentIdentityUserId, TagIds, LevelId, limit);
        await base.OnInitializedAsync();
    }

    void onDapAnClick()
    {
        IsAnswerMode = true;
        if(CurrentUserAnswerIdSelect == questionOnTaps[CurrentQuestionIndex].Answers
            .FirstOrDefault(item=>item.IsCorrect).AnswerId.ToString()
        )
        {
            Score++;
        }
        StateHasChanged();
    }

    async void onEasyClick()
    {
        await repository.UpdateDanhGiaCauhoiOnTap(questionOnTaps[CurrentQuestionIndex].Id, (int)Level.Easy);
        NextQuestion();

    }

    async void onNormalClick()
    {
        await repository.UpdateDanhGiaCauhoiOnTap(questionOnTaps[CurrentQuestionIndex].Id, (int)Level.Normal);

        NextQuestion();
    }

    async void onHardClick()
    {
        await repository.UpdateDanhGiaCauhoiOnTap(questionOnTaps[CurrentQuestionIndex].Id, (int)Level.Hard);

        NextQuestion();
    }



    private void NextQuestion()
    {
        if(CurrentQuestionIndex < questionOnTaps.Count() -1 )
        {
            IsAnswerMode = false;
            CurrentUserAnswerIdSelect = "0";
            CurrentQuestionIndex++;

        }
        else
        {
            IsFinished = true;
        }
        StateHasChanged();


    }

    

    //public string GetCSSClass()
    //{
    //    if (IsAnswerMode)
    //    {
    //        if(questionOnTaps[CurrentQuestionIndex].Answers.)
    //    }
    //    return "";
    //}
}
