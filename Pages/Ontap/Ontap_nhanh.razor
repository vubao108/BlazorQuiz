@page "/ontap-nhanh/***REMOVED***LevelId:int***REMOVED***/***REMOVED***TagIds***REMOVED***/***REMOVED***limit:int***REMOVED***"
@inject IRepositoryOntap repository
@inject AppState appState

@if(questionQuickReviews?.Count() == 0)
***REMOVED***
    <p>
        Không có câu hỏi nào để ôn tập, hãy chọn lại các tiêu chí như mức độ và loại câu hỏi.
    </p>
***REMOVED***
@if(questionQuickReviews?.Count()>0)***REMOVED***
     <div class="floating-score">
                
                    Làm:@DoneCount/@questionQuickReviews.Count()<br>
               
                
                    <b>Đúng:@Score/@DoneCount</b>
     </div>
     <div class="container">
    
    @foreach(var questionQuickReview in questionQuickReviews) ***REMOVED***
        
        
       
           @* <div class="row">
                <div class="col-4">
                
                    Đã làm: @(CurrentQuestionIndex+1)/@questionOnTaps.Count() câu
                </div>
                <div class="col-2"></div>
                <div class="col-8 text-summary">
                
                    <b>Tỉ lệ đúng: @Score / @(CurrentQuestionIndex+1)</b>
                </div>
                <div class="col-2"></div>
            </div>*@
        
            <div class="row">
                <div class="col-11 col-md-10 @(questionQuickReview.IsAnswerMode ? questionQuickReview.UserResultCss: "")">
                
                    <div class="card bg-light text-dark">
                        <div class="card-header">
                            <b> @(questionQuickReview.STT)/@questionQuickReviews.Count() . @questionQuickReview.questionOnTap.QuestionText
                       </b>
                        </div>
                        <div class="card-body scroll-answer">
                      @* <span class="card-title">></span>*@
                    @if (!questionQuickReview.questionOnTap.IsMultipleChoice)
                    ***REMOVED***
                        @foreach(AnswerDAO answerDAO in questionQuickReview.questionOnTap.Answers)
                        ***REMOVED***
                            <SfRadioButton Label="@answerDAO.AnswerText" Name="@(questionQuickReview.STT.ToString())" Value="@answerDAO.AnswerId.ToString()"
                            @bind-Checked="CurrentUserAnswerIdSelect" 
                            @onclick="()=>onAnswerChoiced(answerDAO.AnswerId, questionQuickReview)"
                            CssClass="@(questionQuickReview.IsAnswerMode ? answerDAO.IsCorrect ? "e-info btn-block right-answer": "e-info btn-block" : "e-info btn-block"  )"
                            Disabled=@(questionQuickReview.IsAnswerMode)
                            >

                            </SfRadioButton> <br /><br />
                    ***REMOVED***
                ***REMOVED***
                    else
                    ***REMOVED***
                        @foreach(AnswerDAO answerDAO in questionQuickReview.questionOnTap.Answers)
                        ***REMOVED***
                            <SfCheckBox Label="@answerDAO.AnswerText" Name="@(questionQuickReview.STT.ToString())" Value="@answerDAO.AnswerId.ToString()"
                            @bind-Checked="answerDAO.IsUserSelected" 
                            CssClass="@(questionQuickReview.IsAnswerMode ? answerDAO.IsCorrect ? "e-info btn-block right-answer": "e-info btn-block" : "e-info btn-block"  )"
                            Disabled=@(questionQuickReview.IsAnswerMode)
                            >

                            </SfCheckBox> <br /><br />
                    ***REMOVED***
                ***REMOVED***
                    </div>
                   @* <div class="card-footer">

                    </div>*@
                    </div>
                
                </div>

            </div>
            <div class="row answer-button">
                @if (!questionQuickReview.IsAnswerMode)
                ***REMOVED***
                    <div class="col-11 col-md-10">
                        <button class="btn btn-primary btn-block" @onclick="()=>onDapAnClick(questionQuickReview)">Đáp án</button>
                    </div>
            ***REMOVED***else***REMOVED***
            
                    <div class="col-3 col-md-3">
                            <button class="btn @(questionQuickReview.levelId==1 ? "btn-danger" : "btn-primary")  btn-block" @onclick="()=>onEasyClick(questionQuickReview)"> Dễ </button>
                    </div>
                    <div class="col-5 col-md-4">
                        <button  class="btn @(questionQuickReview.levelId==2 ? "btn-danger" : "btn-primary") btn-block" @onclick="()=>onNormalClick(questionQuickReview)" >Thường </button>
                    </div >
                    <div class="col-3 col-md-3">
                        <button  class="btn @(questionQuickReview.levelId==3 ? "btn-danger" : "btn-primary") btn-block" @onclick="()=>onHardClick(questionQuickReview)">Khó </button>
                    </div>
            ***REMOVED***
           
            </div>
        

        
***REMOVED***
    </div>
   @* @if(IsFinished)
    ***REMOVED***
        <p> Đã xong phiên ôn tập</p>
        <b>Tỉ lệ đúng: @Score / @(CurrentQuestionIndex+1)</b>
***REMOVED****@
***REMOVED***
<style>
    .floating-score ***REMOVED***
    position: fixed;
    bottom: 50%;
    right: 0;
    border-radius: 4px;
    z-index: 10;
***REMOVED***
    .user-answer-correct***REMOVED***
        background-color:blue
***REMOVED***
    .user-answer-false***REMOVED***
        background-color:red
***REMOVED***
    .answer ***REMOVED***
        font-size:14px !important
***REMOVED***
    .right-answer***REMOVED***
        background-color:yellow
***REMOVED***
    .answer-button***REMOVED***
        margin-bottom:16px;
***REMOVED***
    .scroll-answer***REMOVED***
        @*max-height:70vh;
        overflow-y:auto;*@
***REMOVED***
     .e-radio-wrapper.e-info .e-radio:checked + label::after ***REMOVED*** /* csslint allow: adjoining-classes */
        background-color: #2196f3;
        color: #2196f3;
       
***REMOVED***
    .e-radio-wrapper.e-info .e-radio:checked:focus + label::after,
    .e-radio-wrapper.e-info .e-radio:checked + label:hover::after ***REMOVED*** /* csslint allow: adjoining-classes */
        background-color: #0b7dda;
***REMOVED***

    .e-radio-wrapper.e-info .e-radio:checked + label::before ***REMOVED***
        border-color: #2196f3;
        background-color: #fff;
        
***REMOVED***

    .e-radio-wrapper.e-info .e-radio:checked:focus + label::before,
    .e-radio-wrapper.e-info .e-radio:checked + label:hover::before ***REMOVED***
        border-color: #0b7dda;
       
        
***REMOVED***

    .e-radio-wrapper.e-info .e-radio + label:hover::before ***REMOVED***
        border-color: #b1afaf;
***REMOVED***
    .e-radio+label .e-label ***REMOVED***
         font-size:16px;
        
***REMOVED***
    .floating-button ***REMOVED***
    position: fixed;
    bottom: 50%;
    right: 0;
    border-radius: 4px;
    z-index: 10;
***REMOVED***
    
    .text-summary***REMOVED***
     text-align: center;
***REMOVED***

</style>
@code ***REMOVED***
    List<QuestionOnTap> questionOnTaps;
    List<QuestionQuickReview> questionQuickReviews;
    public int CurrentQuestionIndex ***REMOVED*** get; set; ***REMOVED***
    private string CurrentUserAnswerIdSelect;

    [Parameter]
    public string TagIds ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int LevelId ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int limit ***REMOVED*** get; set; ***REMOVED***

    String RightAnswerCSS***REMOVED*** get; set; ***REMOVED***

    String UserResultCss***REMOVED*** get; set; ***REMOVED***

    bool IsAnswerMode ***REMOVED*** get; set; ***REMOVED***

    private int Score;
    private int DoneCount;
    private bool IsFinished;
    class QuestionQuickReview
    ***REMOVED***
        public QuestionOnTap questionOnTap***REMOVED*** get; set; ***REMOVED***
        public bool IsAnswerMode ***REMOVED*** get; set; ***REMOVED***
        public int STT ***REMOVED*** get; set; ***REMOVED***
        public int levelId ***REMOVED*** get; set; ***REMOVED***
        public string UserResultCss***REMOVED*** get; set; ***REMOVED***

***REMOVED***

    protected override async Task OnInitializedAsync()
    ***REMOVED***
        questionOnTaps = await repository.LayDanhSachCauHoiOnTapTheoMucDo(appState.CurrentIdentityUserId, TagIds, LevelId, limit);
        if(questionOnTaps.Count() > 0)
        ***REMOVED***
            questionQuickReviews = new List<QuestionQuickReview>(questionOnTaps.Count());
            int stt = 0;
            foreach (var question in questionOnTaps) ***REMOVED***
                questionQuickReviews.Add(new QuestionQuickReview()
                ***REMOVED***questionOnTap = question, IsAnswerMode = false, STT = ++stt***REMOVED***);

        ***REMOVED***
    ***REMOVED***

        await base.OnInitializedAsync();
***REMOVED***
    void onAnswerChoiced(int answerId, QuestionQuickReview questionQuickReview)
    ***REMOVED***
        foreach(var answer in questionQuickReview.questionOnTap.Answers)
        ***REMOVED***
            if(answer.AnswerId == answerId)
            ***REMOVED***
                answer.IsUserSelected = true;
        ***REMOVED***
            else
            ***REMOVED***
                answer.IsUserSelected = false;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
    void onDapAnClick(QuestionQuickReview questionQuickReview)
    ***REMOVED***
        questionQuickReview.IsAnswerMode = true;
        DoneCount++;
        //if(CurrentUserAnswerIdSelect == questionOnTaps[CurrentQuestionIndex].Answers
        //    .FirstOrDefault(item=>item.IsCorrect)?.AnswerId.ToString()
        //)
        //***REMOVED***
        //    Score++;
        //***REMOVED***
        //StateHasChanged();
        if (CheckTraLoiDung(questionQuickReview))
        ***REMOVED***
            questionQuickReview.UserResultCss = "user-answer-correct";
            Score++;
    ***REMOVED***
        else
        ***REMOVED***
            questionQuickReview.UserResultCss = "user-answer-false";
    ***REMOVED***
        CurrentUserAnswerIdSelect = "0";
***REMOVED***

    private bool CheckTraLoiDung(QuestionQuickReview questionQuickReview)
    ***REMOVED***
        //if (questionQuickReview.questionOnTap.IsMultipleChoice)
        //***REMOVED***



        var listUserChoose = questionQuickReview.questionOnTap.Answers.Where(item => item.IsUserSelected).Select(item => item.AnswerId).ToList();
        var listRightAnswer = questionQuickReview.questionOnTap.Answers.Where(item => item.IsCorrect).Select(item => item.AnswerId).ToList();
        return listUserChoose?.Count() > 0 && listUserChoose.Count() == listRightAnswer?.Count()
            && listUserChoose.All(item => listRightAnswer.Contains(item));
        //***REMOVED***
        //else
        //***REMOVED***
        //    return CurrentUserAnswerIdSelect == questionQuickReview.questionOnTap.Answers
        //    .FirstOrDefault(item => item.IsCorrect)?.AnswerId.ToString();
        //***REMOVED***


***REMOVED***

    async void onEasyClick(QuestionQuickReview question)
    ***REMOVED***
        await repository.UpdateDanhGiaCauhoiOnTap(question.questionOnTap.Id, (int)Level.Easy);
        question.levelId = 1;
        StateHasChanged();
        //NextQuestion();

***REMOVED***

    async void onNormalClick(QuestionQuickReview question)
    ***REMOVED***
        await repository.UpdateDanhGiaCauhoiOnTap(question.questionOnTap.Id, (int)Level.Normal);
        question.levelId = 2;
        StateHasChanged();
        //NextQuestion();
***REMOVED***

    async void onHardClick(QuestionQuickReview question)
    ***REMOVED***
        await repository.UpdateDanhGiaCauhoiOnTap(question.questionOnTap.Id, (int)Level.Hard);
        question.levelId = 3;
        StateHasChanged();
        //NextQuestion();
***REMOVED***



    //private void NextQuestion()
    //***REMOVED***
    //    if(CurrentQuestionIndex < questionOnTaps.Count() -1 )
    //    ***REMOVED***
    //        IsAnswerMode = false;
    //        CurrentUserAnswerIdSelect = "0";
    //        CurrentQuestionIndex++;

    //***REMOVED***
    //    else
    //    ***REMOVED***
    //        IsFinished = true;
    //***REMOVED***
    //    StateHasChanged();


    //***REMOVED***

    

    //public string GetCSSClass()
    //***REMOVED***
    //    if (IsAnswerMode)
    //    ***REMOVED***
    //        if(questionOnTaps[CurrentQuestionIndex].Answers.)
    //***REMOVED***
    //    return "";
    //***REMOVED***
***REMOVED***
