
@using BlazorVNPTQuiz.Models;

@inject NavigationManager NavManager
@inject AppState AppState;
@implements IDisposable;
<div class="card @GetClassCss()">
    <div class="card-header"><b>@ExamItem.ExamName</b></div>
    <div class="card-body">
        Số câu: @ExamItem.NumOfQuestion<br />
        Thời gian làm bài: @(ExamItem.Duration/60) phút<br />
        Số lần thi tối đa: @ExamItem.MaxTry lần<br />
    </div>
    <div class="card-footer">
        <button @onclick="StartBaiThi" class="btn-success">Vào thi</button>
    </div>


</div>
@code ***REMOVED***
    [Parameter]
    public ExamInfo ExamItem ***REMOVED*** get; set; ***REMOVED***
    [Parameter]
    public int UserId ***REMOVED*** get; set; ***REMOVED***

    private string GetClassCss()
    ***REMOVED***
         if ((bool)AppState.JoinedExamIds?.Contains(ExamItem.ExamId))
        ***REMOVED***
            return "backgroundJoined text-white";
    ***REMOVED***
        return "bg-light text-dark";
***REMOVED***

    

    public void StartBaiThi()
    ***REMOVED***
        //string absulateUri = NavManager.ToBaseRelativePath();
        //AppState.UpdateSelectedExam(this, ExamItem);
        Uri absUri = NavManager.ToAbsoluteUri($"exam/***REMOVED***UserId***REMOVED***/***REMOVED***ExamItem.ExamId***REMOVED***");//***REMOVED***ExamItem.ExamName***REMOVED***");
        NavManager.NavigateTo(absUri.ToString());

***REMOVED***

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    ***REMOVED***
        if (Source != this)
        ***REMOVED***
            await InvokeAsync(StateHasChanged);
    ***REMOVED***
***REMOVED***



    protected override void OnInitialized()
    ***REMOVED***
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
***REMOVED***

    void IDisposable.Dispose()
    ***REMOVED***
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
***REMOVED***

***REMOVED***
