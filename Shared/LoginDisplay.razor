@inject AppState AppState
@implements IDisposable
@using System.Timers;
    <AuthorizeView>

        <Authorized>
            <div class="col-8 col-md-8"  >
                @if (AppState.SelectedExamNotFinishedInfo?.CurrentExam != null)
                {
                <a href="exam/@AppState.CurrentIdentityUserId/@AppState.SelectedExamNotFinishedInfo?.CurrentExam?.ExamId"><b>@AppState.SelectedExamNotFinishedInfo?.CurrentExam?.ExamName</b></a>
                <text> &nbsp; &nbsp; &nbsp;</text>
                    <span style="color:red"> @GetStringCountDown() </span>


                }
            </div>
            <div class="col-4 col-md-4">
                <a href="Identity/Account/Manage">Xin chào, @context.User.Identity.Name!</a>
               
                <a href="Identity/Account/Logout">Đăng xuất</a>
            </div>
        </Authorized>
        <NotAuthorized>
            <div >
                @*<a href="Identity/Account/Register">Đăng ký</a>*@
                <a href="Identity/Account/Login">Đăng nhập</a>
                @*<a href="login">Đăng nhập</a>*@
            </div>
        </NotAuthorized>

    </AuthorizeView>

    @code{
        

        private async Task AppState_StateChanged(ComponentBase Source, string Property)
        {
            if (Source != this)
            {
                // Inspect Property to determine if action needs to be taken.
                await InvokeAsync(StateHasChanged);
            }
        }
        protected override void OnInitialized()
        {
           
            AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
            
            
        }
        protected override async Task OnInitializedAsync()
        {
           await  AppState.InitializeState();
        }

        private string GetStringCountDown()
        {

            return $"{AppState.RemainSeconds / 60}:{AppState.RemainSeconds%60}";
        }

        
        
       
        void IDisposable.Dispose()
        {
            AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);

        }
    }